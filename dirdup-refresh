#!/usr/bin/env python3

import os
import sys
import socket
import hashlib
import re

from os.path import getsize, join
from functools import partial

def mkdirs(target):
	if not os.path.exists(target):
		os.makedirs(target)


def gethostname():
	hostname=socket.gethostname()

	if "DIRDUP_HOSTNAME" in os.environ:
		hostname=os.environ["DIRDUP_HOSTNAME"]

	return hostname



def getworkdir():
	workdir="./"

	if "DIRDUP_WORKDIR" in os.environ:
		workdir=os.environ["DIRDUP_WORKDIR"]

	return workdir


def md5sum(filename):
	with open(filename, mode='rb') as f:
		d = hashlib.md5()
		for buf in iter(partial(f.read, 128), b''):
			d.update(buf)
	return d.hexdigest()


def main(argv):

	if len(argv) < 2:
		print("usage: dirdup-scan path")
		return

	if "--help" in argv:
		print("usage: dirdup-scan path")
		return

	hostname=gethostname()
	workdir=getworkdir()

	seedname=argv[1]

	seedfilepath=workdir + 'accesses/' + hostname + '/' + hostname + '/'
	seedfilename=seedfilepath + seedname

	indexfilepath=workdir + 'indexes/' + hostname + '/'
	indexfilename=indexfilepath + seedname

	if not os.path.exists(seedfilename):
		print("Seed file already does not exist. Aborting.")
		return

	with open(seedfilename, 'r', newline="\n") as seedstream:
		seedpath=seedstream.readline().split('\n')[0].split(':')[1].rstrip('/')
		reloffset=len(seedpath)+1

	if seedpath == '':
		seedpath = '/'
		reloffset=len(seedpath)

	exceptionsfilename=workdir + 'exceptions/' + hostname + '/' + seedname
	exceptions=[]
	if os.path.isfile(exceptionsfilename):
		for line in open(exceptionsfilename, 'r', newline="\n").readlines():
			exceptions.append(seedpath + '/' + line.split('\n')[0].rstrip('/'))

	readdata={}
	if os.path.isfile(indexfilename):
		print("Reading previous index...")
		for line in open(indexfilename, 'r'):
			if (line != '\n'):
				fields=re.split(' +', line.rstrip('\n').lstrip(' '), 3)
				file_sections = fields[3].rpartition('/')
				if fields[3] not in readdata:
					readdata[fields[3]] = (fields[0], fields[1], fields[2], file_sections[0], file_sections[2], seedpath)

	if os.path.isfile(indexfilename + '.refresh'):
		print("Reading previous partial index...")
		for line in open(indexfilename + '.refresh', 'r'):
			if (line != '\n'):
				fields=re.split(' +', line.rstrip('\n').lstrip(' '), 3)
				file_sections = fields[3].rpartition('/')
				readdata[fields[3]] = (fields[0], fields[1], fields[2], file_sections[0], file_sections[2], seedpath)

	mkdirs(indexfilepath)
	indexfilerefresh=open(indexfilename + '.refresh', 'w')

	print("Ennumerating files and creating new index...")
	for root, dirs, files in os.walk(seedpath):
		for d in dirs:
			if root + '/' + d in exceptions:
				dirs.remove(d);
		for f in files:
			try:
				fn = root + '/' + f
				key = fn[reloffset:]
				file_mtime=int(os.stat(fn).st_mtime)
				if not os.path.exists(fn):
					continue
				if not os.path.isfile(fn):
					continue
				if key in readdata and file_mtime == int(readdata[key][1]):
					indexfilerefresh.write("%11d %11s %32s  %s\n" % (int(readdata[key][0]), int(readdata[key][1]), readdata[key][2], key))
				else:
					print("Rehashing %s" % key)
					indexfilerefresh.write("%11d %11s %32s  %s\n" % (os.stat(fn).st_size, file_mtime, md5sum(fn), key))
				indexfilerefresh.flush()
			except IOError:
				pass
			except OSError:
				pass

	os.rename(indexfilename + '.refresh', indexfilename)

main(sys.argv)



"""

indexes/device/location_name:
size time hash path/filename
size time hash path/filename
size time hash path/filename
size time hash path/filename

accesses/this_device/remote_device:
location_name = method, path, [or something]

"""
